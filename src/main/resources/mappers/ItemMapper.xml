<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" 
    "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="ItemMapper">

	<!-- Beans 클래스 객체이름(id)과 클래스이름(type)을 명시한다. -->
	<resultMap id="itemMap" type="com.son.mypc.model.Item">
		<!-- Beans의 멤버변수(property)이름과 대상 테이블의 컬럼(column)을 연결한다. -->
		<result property="itemno" column="itemno" />
		<result property="category" column="category" />
		<result property="item_name" column="item_name" />
		<result property="manufac" column="manufac" />
		<result property="spec" column="spec" />
		<result property="price" column="price" />
		<result property="stock" column="stock" />
		<result property="reg_date" column="reg_date" />
		<result property="rel_date" column="rel_date" />
		<result property="item_img1" column="item_img1" />
		<result property="item_img2" column="item_img2" />
		<result property="item_imgthumb" column="item_imgthumb" />
		<result property="item_sold" column="item_sold" />
	</resultMap>

	<!-- 단일행 조회를 위한 기능 정의 -->
	<select id="selectItem"
		parameterType="com.son.mypc.model.Item" resultMap="itemMap">
		SELECT itemno,
		category, item_name, manufac, spec, price, stock, reg_date, rel_date,
		item_img1, item_img2, item_imgthumb FROM item WHERE itemno=#{itemno};
	</select>

	<!-- 다중행 조회를 위한 기능 정의 -->
	<select id="selectList"
		parameterType="com.son.mypc.model.Item" resultMap="itemMap">

		SELECT itemno, category, item_name, manufac, spec, price, stock,
		reg_date, rel_date,
		item_img1, item_img2, item_imgthumb FROM item

		<where>
			<if test="minimumPrice != 0 and maximumPrice != 0">
				(
			</if>
			<if test="category != null">
				category LIKE concat('%', #{category}, '%')
			</if>
			<if test="manufac != null and manufac !=''">
				OR manufac LIKE concat('%', #{manufac}, '%')
			</if>
			<if test="item_name != null and item_name !=''">
				OR item_name LIKE concat('%', #{item_name}, '%')
			</if>
			<if test="spec != null and spec !=''">
				OR spec LIKE concat('%', #{spec}, '%')
			</if>
			<!-- 상품 스펙 체크박스 옵션이 존재하는 경우 -->
			<if test="item_chked != null">
				AND
				<foreach collection="item_chked" index="index" item="item"
					open="(" close=")">
					<choose>
						<!-- 처음 조건은 AND 조건 -->
						<when test="index == 0">
							spec LIKE concat('%', #{item}, '%')
						</when>
						<!-- 이후 조건은 OR 조건 -->
						<when test="index > 0">
							OR spec LIKE concat('%', #{item}, '%')
						</when>
					</choose>
				</foreach>
			</if>
			<!-- 가격 검색 옵션이 존재하는 경우 -->
			<if test="minimumPrice != 0 and maximumPrice != 0">
				) AND price BETWEEN #{minimumPrice} AND #{maximumPrice}
			</if>
		</where>

		<!-- 상품 정렬 값이 존재하는 경우 -->
		<if test="item_alignment==0">
			ORDER BY itemno DESC
		</if>
		<if test="item_alignment==1">
			ORDER BY item_sold DESC
		</if>
		<if test="item_alignment==2">
			ORDER BY rel_date ASC
		</if>
		<if test="item_alignment==3">
			ORDER BY price ASC
		</if>
		<if test="item_alignment==4">
			ORDER BY price DESC
		</if>

		<if test="listCount > 0">
			LIMIT #{offset}, #{listCount}
		</if>
	</select>


	<!-- 데이터 저장을 위한 기능 정의 -->
	<insert id="insertItem"
		parameterType="com.son.mypc.model.Item" useGeneratedKeys="true"
		keyProperty="itemno">
		INSERT INTO item (category, item_name, manufac, spec,
		price, stock, reg_date, rel_date,
		item_img1, item_img2, item_imgthumb)
		VALUES (#{category}, #{item_name}, #{manufac}, #{spec}, #{price},
		#{stock}, #{reg_date}, #{rel_date}, #{item_img1}, #{item_img2},
		#{item_imgthumb});
	</insert>

	<!-- 데이터 수 조회를 위한 기능 정의 -->
	<select id="selectItemCount"
		parameterType="com.son.mypc.model.Item" resultType="int">
		SELECT COUNT(*) FROM item

		<where>
			<if test="minimumPrice != 0 and maximumPrice != 0">
				(
			</if>
			<if test="category != null">
				category LIKE concat('%', #{category}, '%')
			</if>
			<if test="manufac != null and manufac !=''">
				OR manufac LIKE concat('%', #{manufac}, '%')
			</if>
			<if test="item_name != null and item_name !=''">
				OR item_name LIKE concat('%', #{item_name}, '%')
			</if>
			<if test="spec != null and spec !=''">
				OR spec LIKE concat('%', #{spec}, '%')
			</if>
			<!-- 상품 스펙 체크박스 옵션이 존재하는 경우 -->
			<if test="item_chked != null">
				AND
				<foreach collection="item_chked" index="index" item="item"
					open="(" close=")">
					<choose>
						<!-- 처음 조건은 AND 조건 -->
						<when test="index == 0">
							spec LIKE concat('%', #{item}, '%')
						</when>
						<!-- 이후 조건은 OR 조건 -->
						<when test="index > 0">
							OR spec LIKE concat('%', #{item}, '%')
						</when>
					</choose>
				</foreach>
			</if>
			<!-- 가격 검색 옵션이 존재하는 경우 -->
			<if test="minimumPrice != 0 and maximumPrice != 0">
				) AND price BETWEEN #{minimumPrice} AND #{maximumPrice}
			</if>
		</where>

		<!-- 상품 정렬 값이 존재하는 경우 -->
		<if test="item_alignment==0">
			ORDER BY itemno DESC
		</if>
		<if test="item_alignment==1">
			ORDER BY item_sold DESC
		</if>
		<if test="item_alignment==2">
			ORDER BY rel_date ASC
		</if>
		<if test="item_alignment==3">
			ORDER BY price ASC
		</if>
		<if test="item_alignment==4">
			ORDER BY price DESC
		</if>
	</select>

	<!-- 데이터 갱신을 위한 기능 정의 -->
	<update id="editStock"
		parameterType="com.son.mypc.model.Item">
		UPDATE item SET
		stock=#{stock}
		WHERE
		itemno=#{itemno}
	</update>

	<!-- 데이터 갱신을 위한 기능 정의 -->
	<update id="editItemSold"
		parameterType="com.son.mypc.model.Item">
		UPDATE item SET
		item_sold=#{item_sold}
		WHERE
		itemno=#{itemno}
	</update>


	<!-- 데이터 갱신을 위한 기능 정의 -->
	<update id="updateItem"
		parameterType="com.son.mypc.model.Item">
		UPDATE item SET
		category=#{category}, item_name=#{item_name}, manufac=#{manufac},
		spec=#{spec}, price=#{price}, stock=#{stock}, reg_date=#{reg_date},
		rel_date=#{rel_date}, item_img1=#{item_img1}, item_img2=#{item_img2},
		item_imgthumb=#{item_imgthumb}
		WHERE itemno=#{itemno};
	</update>


	<!-- 데이터 삭제를 위한 기능 정의 -->
	<delete id="deleteItem"
		parameterType="com.son.mypc.model.Item">
		DELETE FROM item WHERE itemno=#{itemno};
	</delete>

	<!-- 카테고리별 상품 등록 수 통계 데이터 목록 조회 -->
	<select id="selectStats1"
		parameterType="com.son.mypc.model.Item" resultMap="itemMap">
		SELECT
		category, count(category) as stock FROM mypc.item group by category;
	</select>

</mapper>